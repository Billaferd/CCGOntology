@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix ccg: <https://example.org/ccg> .

# Quantum Nexus as a Card Game
qn:QuantumNexus a rdfs:Class ;
    rdfs:subClassOf ccg:CardGame ;
    skos:prefLabel "Quantum Nexus"@en ;
    dct:description "A sci-fi trading card game of strategic battles between advanced civilizations."@en .

# Game Components
qn:QuantumNexusDeck a rdfs:Class ;
    rdfs:subClassOf ccg:Deck ;
    ccg:hasCardCount 200 .

qn:MissionCardArea a rdfs:Class ;
    rdfs:subClassOf ccg:PublicPlayZone ;
    ccg:hasPlayArea ccg:QuantumNexus .

qn:LoadoutArea a rdfs:Class ;
    rdfs:subClassOf ccg:PublicPlayZone ;
    ccg:hasPlayArea ccg:QuantumNexus .

qn:QuantumNexusBattlefield a rdfs:Class ;
    rdfs:subClassOf ccg:PlayArea ;
    ccg:hasPlayArea ccg:QuantumNexus .

# Example Quadrants (Full Representation Would Include All Quadrants)
qn:FrontLeftQuadrant a rdfs:Class ;
    rdfs:subClassOf ccg:PublicPlayZone ;
    ccg:adjacentTo qn:FrontCenterQuadrant, qn:BackLeftQuadrant ;
    ccg:hasPlayArea qn:QuantumNexusBattlefield .

qn:FrontCenterQuadrant a rdfs:Class ;
    rdfs:subClassOf ccg:PublicPlayZone ;
    ccg:adjacentTo qn:FrontLeftQuadrant, qn:FrontRightQuadrant, qn:BackCenterQuadrant ;
    ccg:hasPlayArea qn:QuantumNexusBattlefield . 

qn:FrontRightQuadrant a rdfs:Class ;
    rdfs:subClassOf ccg:PublicPlayZone ;
    CCG:adjacentTo qn:FrontCenterQuadrant, qn:BackRightQuadrant ;
    ccg:hasPlayArea qn:QuantumNexusBattlefield .

qn:BackLeftQuadrant a rdfs:Class ;
    rdfs:subClassOf ccg:PublicPlayZone ;
    ccg:adjacentTo qn:BackCenterQuadrant, qn:FrontLeftQuadrant ;
    ccg:hasPlayArea qn:QuantumNexusBattlefield .

qn:BackCenterQuadrant a rdfs:Class ;
    rdfs:subClassOf ccg:PublicPlayZone ;
    ccg:adjacentTo qn:BackLeftQuadrant, qn:BackRightQuadrant, qn:FrontCenterQuadrant ;
    ccg:hasPlayArea qn:QuantumNexusBattlefield . 

qn:BackRightQuadrant a rdfs:Class ;
    rdfs:subClassOf ccg:PublicPlayZone ;
    ccg:adjacentTo qn:BackCenterQuadrant, qn:FrontRightQuadrant ;
    ccg:hasPlayArea qn:QuantumNexusBattlefield .
    
# Card Types
qn:UnitCard a rdfs:Class ;
    rdfs:subClassOf ccg:PermanentCard .

qn:LeaderUnitCard a rdfs:Class ;
    rdfs:subClassOf ccg:UnitCard .

qn:AssetCard a rdfs:Class ;
    rdfs:subClassOf ccg:PermanentCard .

qn:EventCard a rdfs:Class ;
    rdfs:subClassOf ccg:Card .

qn:UpgradeCard a rdfs:Class ;
    rdfs:subClassOf ccg:PermanentCard .

qn:TerrainCard a rdfs:Class ;
    rdfs:subClassOf ccg:PermanentCard .

qn:MissionCard a rdfs:Class ;
    rdfs:subClassOf ccg:PermanentCard .

qn:CommandPoint a rdfs:Class ;
    rdfs:subClassOf ccg:GameStat, ccg:CardStat .

qn:VictoryPoint a rdfs:Class ;
    rdfs:subClassOf ccg:GameStat .

qn:InitiativeRule a ccg:Rule ;
    skos:prefLabel "Initiative Rule"@en ;
    dct:description "The player who activates/deploys the fewest cards in the previous phase has the initiative in the current phase."@en ;
    spin:constraint [
        a spin:Template ;
        spin:body [
            CONSTRUCT {
    qn:DeploymentPhase ccg:hasInitiativePlayer ?player .
}
WHERE {
    # ... (Similar to the general template, identifying the previous Battle Phase)

    # Find players tied for fewest cards played 
    { 
        SELECT ?player (COUNT(?action) AS ?actionCount)
        WHERE {
            # ... (Logic to count cards played by each player)
        }
        GROUP BY ?player
        HAVING (COUNT(?action) = MIN(?actionCountInGroup)) 
    }

    # If there's a tie, find the player who spent the least CP 
    {
        SELECT ?player (SUM(?cpCost) AS ?totalCPSpent)
        WHERE {
            # ... (Logic to sum CP costs of actions taken by tied players) 
        }
        GROUP BY ?player
        ORDER BY ?totalCPSpent
        LIMIT 1
    }
        ]
    ] .

# Turn Structure (Basic Phases)
qn:QuantumNexusTurnStructure a ccg:TurnStructure ;
    ccg:hasPhase qn:ReadyPhase ;
    ccg:hasPhase qn:DeploymentPhase ;
    ccg:hasPhase qn:CommandPhase ;
    ccg:hasPhase qn:BattlePhase . 

qn:ReadyPhase a rdfs:Class ;
    rdfs:subClassOf ccg:Phase ;
    ccg:hasStep qn:DeactivateStep, qn:ResetComandPointStep, qn:DrawCardLimitStep ;
    skos:prefLabel "Ready Phase" ;
    dct:description "The ready phase is the first phase of a turn."@en .

qn:DeploymentPhase a owl:Class ;
    rdfs:subClassOf ccg:Phase ;
    ccg:hasStep qn:DeployStep ;
    skos:prefLabel "Deployment Phase"@en ;
    dct:description "The second phase, where cards are deployed into the battlefield."@en .
    

# Game Actions (Examples)
qn:DeployUnitAction rdf:type ccg:CardAction ;
    skos:prefLabel "Deploy Unit" ;
    dct:description "Play a unit card from the hand to the battlefield."@en .

qn:ActivateAbilityAction rdf:type ccg:ActivateAction ;
    skos:prefLabel "Activate Ability" ;
    dct:description "Use a card's ability by paying its cost."@en .

qn:AttachUpgradeAction a rdfs:Class ;
    rdfs:subClassOf ccg:CardAction .

qn:attachedTo a owl:ObjectProperty ;
    rdfs:range qn:UpgradeCard ;
    rdfs:domain ccg:PermanentCard .

qn:hasDomainPoints a owl:DatatypeProperty ;
    rdfs:subClassOf ccg:hasCurrentValue ;
    rdfs:range xsd:integer ;
    owl:withRestrictions (
        [ xsd:minInclusive 0 ]
        [ xsd:maxInclusive 4 ]
    ) .

